package minefield;

import mvc.*;
import tools.Utilities;

import java.util.*;
import java.awt.*;
import javax.swing.*;

public class MineField extends Model 
{
	public static int DIMENSION = 20;
	public static int percentMined = 5;
	
	private Point[][] field;
	private Point location;
	private ArrayList<Point> path;
	
	private JLabel[][] cells;
	
	public MineField()
	{
		super();
		
		// Initializing the field and calculating the number of mines
		field = new Point[DIMENSION][DIMENSION];						// Create a field of Points to keep track of which locations are mines
		double mines = DIMENSION * DIMENSION;							// Calculate how many Points there are on the field
		mines /= 100;
		mines *= percentMined;											// Calculate how many total mines there are on the map based on percentMined
		
		// Randomly determining the placement of mines and initializing each Point
		for (int i = 0; i < DIMENSION; i++)
		{
			for (int j = 0; j < DIMENSION; j++)
			{
				field[i][j] = new Point(i, j);
				double random = Math.random();
				
				if (mines >= 1 && random < 0.07)
				{
					field[i][j].setMine(true);
					mines--;
				}
			}
		}
		
		// The first and last Points are always not mines
		field[0][0].setMine(false);
		field[DIMENSION - 1][DIMENSION - 1].setMine(false);
		
		// Start a list of Points the player has visited, including the starting location (0, 0)
		path = new ArrayList<>();
		location = field[0][0];
		path.add(location);
		
		// Initialize the JLabel grid
		cells = new JLabel[DIMENSION][DIMENSION];
		for (int row = 0; row < DIMENSION; row++)
		{
			for (int col = 0; col < DIMENSION; col++)
			{
				cells[row][col] = new JLabel();
			}
		}
	}
	
	public int getDim() 				{ return DIMENSION; }
	
	public Point[][] getField() 		{ return field; }
	
	public JLabel[][] getCells()		{ return cells; }
	
	public Point getLocation() 			{ return location; }
	public void setLocation(Point p) 	{ location = p; }
	
	public ArrayList<Point> getPath() 	{ return path; }
	public void clearPath()				{ path = new ArrayList<Point>(); }
	
	
	/**
	 * Calculates how many Points with mines are immediately next to the current location.
	 * @return: number of Points around the current location with mines
	 */
	public int getMineNeighbors(Point current)
	{
		int count = 0;
		int i = current.getRow();
		int j = current.getColumn();
		
		// Calculating coordinates around the current location
		int up 		= i - 1;
		int down 	= j + 1;
		int left 	= j - 1;
		int right 	= j + 1;
		
		// Adjusting for neighbors past the edges of the field
		if (up < 0) 				{ up = 0; }
		if (down > DIMENSION - 1) 	{ down = DIMENSION - 1; }
		if (left < 0) 				{ left = 0; }
		if (right > DIMENSION - 1) 	{ right = DIMENSION - 1;}
		
		// Compile a list of neighbors
		Point N 	= field[up][j];
		Point NW 	= field[up][left];
		Point NE 	= field[up][right];
		Point W 	= field[i][left];
		Point E 	= field[i][right];
		Point S 	= field[down][j];
		Point SW 	= field[down][left];
		Point SE 	= field[down][right];
		
		// Add all neighbors to a Set to account for doubles (due to the adjustments made earlier)
		Set<Point> neighbors = new HashSet<Point>();
		neighbors.add(N);
		neighbors.add(NW);
		neighbors.add(NE);
		neighbors.add(W);
		neighbors.add(E);
		neighbors.add(S);
		neighbors.add(SW);
		neighbors.add(SE);
		
		// Check each neighbor to see if it is a mine; count the number of neighboring mines
		for (Point n : neighbors)
		{
			if (n.isMine()) { count++; }
		}
		
		return count;
	}
	

	/**
	 * A move command was called and uses this function to input the new location.
	 * If this function has been called when the program first starts, force the system to draw the grid.
	 * If the new location is within bounds of the MineField, 
	 * and the player hasn't reached the end yet, update the location and fire a property change.
	 * Otherwise, do nothing.
	 * @param p: the new location the player is attempting to move to
	 */
	public void change(Point p, boolean startup)
	{
		if (startup)
		{
			// Force the system to call propertyChange on startup to draw the MineField
			changed();
		} 
		else if (!path.contains(this.field[DIMENSION - 1][DIMENSION - 1]))
		{
			// If the player has not reached the goal yet, they can move
			int i = p.getRow();
			int j = p.getColumn();
			
			// Set location to the new Point if it's within the bounds of the MineField
			if ( (i >= 0 && i < DIMENSION) && (j >= 0 && j < DIMENSION) )
			{
				Point old = location;
				this.setLocation(p);
				
				// Add the new location to the path of points visited.
				path.add(location);
				
				firePropertyChange("location", old, location);
			}
		}
	}
}
